PT-BR üáßüá∑

Esta pasta tem como objetivo apresentar um resumo das principais bibliotecas
utilizadas neste projeto e como us√°-las de forma eficiente e pr√°tica.

1 - requests ‚Üí Realiza requisi√ß√µes HTTP para APIs.

    Principais fun√ß√µes:
        - requests.get(url)
            Realiza uma requisi√ß√£o GET para a URL especificada.
            √â recomend√°vel atribuir o resultado a uma vari√°vel para facilitar a leitura do c√≥digo.
        
        - response = requests.get(url)
            Armazena a resposta da requisi√ß√£o na vari√°vel 'response'.

        - response.json()
            Converte o conte√∫do da resposta em um dicion√°rio Python (quando o retorno √© JSON).

        - response.raise_for_status()
            Lan√ßa uma exce√ß√£o se a resposta indicar erro (status 4xx ou 5xx).

    Exemplo de uso:
        import requests

        url = "https://pokeapi.co/api/v2/pokemon/pikachu"
        response = requests.get(url)
        response.raise_for_status()  # Garante que n√£o houve erro na requisi√ß√£o
        data = response.json()       # Converte o JSON em dicion√°rio Python


2 - PIL (Pillow) ‚Üí Manipula√ß√£o e convers√£o de imagens

    Principais fun√ß√µes:
        - Image.open(arquivo ou BytesIO)
            Abre uma imagem a partir de um arquivo local ou de dados em mem√≥ria.
        
        - Image.resize((largura, altura), Image.Resampling.LANCZOS)
            Redimensiona a imagem para o tamanho desejado, mantendo a qualidade.
        
        - ImageTk.PhotoImage(imagem)
            Converte uma imagem PIL para um formato compat√≠vel com Tkinter.

    Exemplo de uso:
        from PIL import Image, ImageTk
        from io import BytesIO
        import requests

        url = "https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/25.png"
        response = requests.get(url)
        img_data = BytesIO(response.content)
        img = Image.open(img_data)
        img = img.resize((120, 120), Image.Resampling.LANCZOS)
        tk_img = ImageTk.PhotoImage(img)


3 - Tkinter ‚Üí Cria√ß√£o de interfaces gr√°ficas (GUI) em Python

    Principais fun√ß√µes:
        - Tk()
            Cria a janela principal da aplica√ß√£o.
        
        - Label, Button, Entry, Frame
            Widgets b√°sicos para exibir textos, bot√µes, campos de entrada e agrupamento de elementos.
        
        - widget.place(x=, y=)
            Posiciona o widget em coordenadas absolutas na janela.
        
        - widget.config(op√ß√µes)
            Altera propriedades do widget ap√≥s sua cria√ß√£o.
        
        - mainloop()
            Inicia o loop principal da interface gr√°fica, mantendo a janela aberta.

    Exemplo de uso:
        import tkinter as tk

        window = tk.Tk()
        label = tk.Label(window, text="Hello, world!")
        label.place(x=50, y=50)
        window.mainloop()

EN-US üá∫üá∏

This folder aims to provide a summary of the main libraries used in 
this project, along with practical and efficient ways to use them.

1 - requests ‚Üí Performs HTTP requests to APIs. 
Main functions:
    - requests.get(url)
        Sends a GET request to the specified URL.
        It is recommended to assign the result to a variable for better code readability.
    
    - response = requests.get(url)
        Stores the response from the request in the 'response' variable.

    - response.json()
        Converts the response content into a Python dictionary (when the response is in JSON format).

    - response.raise_for_status()
        Raises an exception if the response indicates an error (status codes 4xx or 5xx).

Example usage:
    import requests

    url = "https://pokeapi.co/api/v2/pokemon/pikachu"
    response = requests.get(url)
    response.raise_for_status()  # Ensures no error occurred during the request
    data = response.json()       # Converts the JSON response into a Python dictionary


2 - PIL (Pillow) ‚Üí Image manipulation and conversion 
Main functions:
    - Image.open(file or BytesIO)
        Opens an image from a local file or from in-memory data.
    
    - Image.resize((width, height), Image.Resampling.LANCZOS)
        Resizes the image to the desired dimensions while preserving quality.
    
    - ImageTk.PhotoImage(image)
        Converts a PIL image into a format compatible with Tkinter.

Example usage:
    from PIL import Image, ImageTk
    from io import BytesIO
    import requests

    url = "https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/25.png"
    response = requests.get(url)
    img_data = BytesIO(response.content)
    img = Image.open(img_data)
    img = img.resize((120, 120), Image.Resampling.LANCZOS)
    tk_img = ImageTk.PhotoImage(img)


3 - Tkinter ‚Üí Creating graphical user interfaces (GUIs) in Python 
Main functions:
    - Tk()
        Creates the main application window.
    
    - Label, Button, Entry, Frame
        Basic widgets to display text, buttons, input fields, and group interface elements.
    
    - widget.place(x=, y=)
        Positions the widget at absolute coordinates within the window.
    
    - widget.config(options)
        Modifies widget properties after creation.
    
    - mainloop()
        Starts the main GUI loop, keeping the window open and responsive.

Example usage:
    import tkinter as tk

    window = tk.Tk()
    label = tk.Label(window, text="Hello, world!")
    label.place(x=50, y=50)
    window.mainloop()